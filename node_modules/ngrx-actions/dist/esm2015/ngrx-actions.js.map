{
  "version": 3,
  "file": "ngrx-actions.js",
  "sources": [
    "ng://ngrx-actions/out/effect.ts",
    "ng://ngrx-actions/out/store.ts",
    "ng://ngrx-actions/out/of-action.ts",
    "ng://ngrx-actions/out/action.ts",
    "ng://ngrx-actions/out/module.ts",
    "ng://ngrx-actions/out/factory.ts",
    "ng://ngrx-actions/out/internals.ts",
    "ng://ngrx-actions/out/select.ts"
  ],
  "sourcesContent": [
    "import { ActionType } from './symbols';\nimport { ensureStoreMetadata } from './internals';\n\nexport function Effect(...effectKlasses: ActionType[]) {\n  return function(target: any, name: string, descriptor: TypedPropertyDescriptor<any>) {\n    const meta = ensureStoreMetadata(target.constructor);\n\n    for (const klass of effectKlasses) {\n      const inst = new klass();\n      const type = inst.type;\n\n      if (meta.effects[type]) {\n        throw new Error(\n          `@Effect for '${type}' is defined multiple times in functions '${meta.effects[type].fn}' and '${name}'`\n        );\n      }\n\n      meta.effects[type] = {\n        action: klass,\n        fn: name,\n        type\n      };\n    }\n  };\n}\n",
    "import { ensureStoreMetadata } from './internals';\n\nexport function Store<TState>(initialState?: TState): (target: Function) => void;\nexport function Store(initialState?: any): (target: Function) => void;\nexport function Store(initialState: any = {}) {\n  return function(target: Function) {\n    const meta = ensureStoreMetadata(target);\n    meta.initialState = initialState;\n  };\n}\n",
    "import { Action } from '@ngrx/store';\nimport { filter } from 'rxjs/operators';\nimport { OperatorFunction } from 'rxjs';\n\nimport { ActionType } from './symbols';\n\nexport function ofAction<T extends Action>(allowedType: ActionType<T>): OperatorFunction<Action, T>;\nexport function ofAction<T extends Action>(...allowedTypes: ActionType[]): OperatorFunction<Action, T>;\nexport function ofAction(...allowedTypes: ActionType[]): OperatorFunction<Action, Action> {\n  const allowedMap = {};\n  allowedTypes.forEach(klass => (allowedMap[new klass().type] = true));\n  return filter((action: Action) => {\n    return allowedMap[action.type];\n  });\n}\n",
    "import { ensureStoreMetadata } from './internals';\nimport { ActionType } from './symbols';\n\nexport function Action(...actionsKlasses: ActionType[]) {\n  return function(target: any, name: string, descriptor: TypedPropertyDescriptor<any>) {\n    const meta = ensureStoreMetadata(target.constructor);\n\n    for (const klass of actionsKlasses) {\n      const inst = new klass();\n      const type = inst.type;\n\n      if (meta.actions[type]) {\n        throw new Error(\n          `@Action for '${type}' is defined multiple times in functions '${meta.actions[type].fn}' and '${name}'`\n        );\n      }\n\n      meta.actions[type] = {\n        action: klass,\n        fn: name,\n        type\n      };\n    }\n  };\n}\n",
    "import { NgModule, InjectionToken, ModuleWithProviders, Injector, Inject, Optional } from '@angular/core';\nimport { Store, StoreModule, ReducerManager, combineReducers } from '@ngrx/store';\n\nimport { NgrxSelect } from './select';\nimport { createReducer } from './factory';\n\nexport const STORE_TOKEN = new InjectionToken<any>('STORE_TOKEN');\nexport const FEATURE_STORE_TOKEN = new InjectionToken<any>('FEATURE_STORE_TOKEN');\n\n@NgModule({\n  imports: [StoreModule],\n  providers: [NgrxSelect]\n})\nexport class NgrxActionsModule {\n  static forRoot(reducers: any): ModuleWithProviders {\n    return {\n      ngModule: NgrxActionsModule,\n      providers: [\n        {\n          provide: STORE_TOKEN,\n          useValue: reducers\n        }\n      ]\n    };\n  }\n\n  static forFeature(key: any, reducers?: any): ModuleWithProviders {\n    return {\n      ngModule: NgrxActionsModule,\n      providers: [\n        {\n          provide: FEATURE_STORE_TOKEN,\n          useValue: { key, reducers }\n        }\n      ]\n    };\n  }\n\n  constructor(\n    @Optional()\n    @Inject(STORE_TOKEN)\n    reducers: any,\n    @Optional()\n    @Inject(FEATURE_STORE_TOKEN)\n    featureReducers: any,\n    reducerFactory: ReducerManager,\n    store: Store<any>,\n    parentInjector: Injector,\n    select: NgrxSelect\n  ) {\n    select.connect(store);\n\n    if (reducers) {\n      for (const key in reducers) {\n        const klass = reducers[key];\n        const inst = parentInjector.get(klass, new klass());\n        reducerFactory.addReducer(key, createReducer(inst));\n      }\n    }\n\n    if (featureReducers) {\n      if (typeof featureReducers.key !== 'string') {\n        featureReducers.reducers = featureReducers.key;\n        featureReducers.key = undefined;\n      }\n\n      const mapped = {};\n      for (const key in featureReducers.reducers) {\n        const klass = featureReducers.reducers[key];\n        const inst = parentInjector.get(klass, new klass());\n        mapped[key] = createReducer(inst);\n      }\n\n      if (featureReducers.key) {\n        reducerFactory.addFeature({\n          reducers: mapped,\n          reducerFactory: <any>combineReducers,\n          key: featureReducers.key\n        });\n      }\n    }\n  }\n}\n",
    "import { Action } from '@ngrx/store';\nimport { materialize } from 'rxjs/operators';\n\nimport { NGRX_ACTIONS_META, StoreMetadata } from './internals';\nimport { NgrxSelect } from './select';\n\nexport function createReducer<TState = any>(\n  store:\n    | {\n        new (...args: any[]): any;\n      }\n    | any\n): (state: TState, action: Action | any) => TState {\n  const isInstance = !store.prototype;\n  const klass = isInstance ? store.constructor : store;\n\n  if (!klass.hasOwnProperty(NGRX_ACTIONS_META)) {\n    throw new Error('A reducer can be created from a @Store decorated class only.');\n  }\n\n  const instance = isInstance ? store : new store();\n  const { initialState, actions, effects } = klass[NGRX_ACTIONS_META] as StoreMetadata;\n\n  return function(state: any = initialState, action: Action) {\n    const actionMeta = actions[action.type];\n    if (actionMeta) {\n      const result = instance[actionMeta.fn](state, action);\n      if (result === undefined) {\n        if (Array.isArray(state)) {\n          return [...state];\n        } else {\n          return { ...state };\n        }\n      }\n      state = result;\n    }\n\n    const effectMeta = effects[action.type];\n    if (effectMeta) {\n      const retVal = instance[effectMeta.fn](state, action);\n      if (retVal) {\n        if (retVal.subscribe) {\n          retVal.pipe(materialize()).subscribe(res => {\n            if (res.value && NgrxSelect.store) {\n              NgrxSelect.store.dispatch(res.value);\n            }\n          });\n        } else if (NgrxSelect.store) {\n          if (Array.isArray(retVal)) {\n            retVal.forEach(r => NgrxSelect.store && NgrxSelect.store.dispatch(r));\n          } else {\n            NgrxSelect.store.dispatch(retVal);\n          }\n        }\n      }\n    }\n\n    return state;\n  };\n}\n",
    "import { ActionType } from './symbols';\n\nexport const NGRX_ACTIONS_META = '__ngrx__actions__';\n\nexport interface StoreMetadata {\n  initialState?: any;\n  actions: ActionsMeta;\n  effects: ActionsMeta;\n}\n\nexport interface ActionMeta {\n  action: ActionType;\n  fn: string;\n  type: string;\n}\n\nexport type ActionsMeta = {\n  [type: string]: ActionMeta;\n};\n\nexport function ensureStoreMetadata(target: any): StoreMetadata {\n  // see https://github.com/angular/angular/blob/master/packages/core/src/util/decorators.ts#L60\n  if (!target.hasOwnProperty(NGRX_ACTIONS_META)) {\n    const defaultMetadata: StoreMetadata = { actions: {}, effects: {} };\n    Object.defineProperty(target, NGRX_ACTIONS_META, { value: defaultMetadata });\n  }\n  return target[NGRX_ACTIONS_META];\n}\n",
    "import { Injectable } from '@angular/core';\nimport { Store, Selector } from '@ngrx/store';\n\n@Injectable()\nexport class NgrxSelect {\n  static store: Store<any> | undefined = undefined;\n  connect(store: Store<any>) {\n    NgrxSelect.store = store;\n  }\n}\n\nexport function Select<TState = any, TValue = any>(\n  selector: Selector<TState, TValue>\n): (target: any, name: string) => void;\n\nexport function Select<TState = any, TValue = any>(\n  selectorOrFeature?: string,\n  ...paths: string[]\n): (target: any, name: string) => void;\n\n/**\n * Slice state from the store.\n */\nexport function Select<TState = any, TValue = any>(\n  selectorOrFeature?: string | Selector<TState, TValue>,\n  ...paths: string[]\n) {\n  return function(target: any, name: string): void {\n    const selectorFnName = '__' + name + '__selector';\n    let fn: Selector<TState, TValue>;\n    // Nothing here? Use propery name as selector\n    if (!selectorOrFeature) {\n      selectorOrFeature = name;\n    }\n    // Handle string vs Selector<TState, TValue>\n    if (typeof selectorOrFeature === 'string') {\n      const propsArray = paths.length ? [selectorOrFeature, ...paths] : selectorOrFeature.split('.');\n      fn = fastPropGetter(propsArray);\n    } else {\n      fn = selectorOrFeature;\n    }\n\n    const createSelect = () => {\n      const store = NgrxSelect.store;\n      if (!store) {\n        throw new Error('NgrxSelect not connected to store!');\n      }\n      return store.select(fn);\n    };\n\n    if (target[selectorFnName]) {\n      throw new Error('You cannot use @Select decorator and a ' + selectorFnName + ' property.');\n    }\n\n    // Redefine property\n    if (delete target[name]) {\n      Object.defineProperty(target, selectorFnName, {\n        writable: true,\n        enumerable: false,\n        configurable: true\n      });\n\n      Object.defineProperty(target, name, {\n        get: function() {\n          return this[selectorFnName] || (this[selectorFnName] = createSelect.apply(this));\n        },\n        enumerable: true,\n        configurable: true\n      });\n    }\n  };\n}\n\n/**\n * The generated function is faster than:\n * - pluck (Observable operator)\n * - memoize (old ngrx-actions implementation)\n * - MemoizedSelector (ngrx)\n */\nexport function fastPropGetter(paths: string[]): (x: any) => any {\n  const segments = paths;\n  let seg = 'store.' + segments[0],\n    i = 0;\n  const l = segments.length;\n  let expr = seg;\n  while (++i < l) {\n    expr = expr + ' && ' + (seg = seg + '.' + segments[i]);\n  }\n  const fn = new Function('store', 'return ' + expr + ';');\n  return <(x: any) => any>fn;\n}\n"
  ],
  "names": [
    "Store"
  ],
  "mappings": "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"
}
